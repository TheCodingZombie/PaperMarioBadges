[manifest]
version = "1.0.0"
dump_lua = true
priority = -9

# easier badge searching functionality
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
self.ability.seal = {}
'''
position = "after"
payload = '''
if G.P_SEALS[_seal].badge then self.ability.seal.badge = G.P_SEALS[_seal].badge
else self.ability.seal.badge = nil end
if G.P_SEALS[_seal].pos then self.ability.seal.pos = G.P_SEALS[_seal].pos
else self.ability.seal.pos = nil end
if G.P_SEALS[_seal].unique then self.ability.seal.unique = G.P_SEALS[_seal].unique
else self.ability.seal.unique = nil end
'''
match_indent = true

# AON functionality
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
function Card:calculate_seal(context)
    if not self:can_calculate() then return {} end
'''
position = "at"
payload = '''
if not (self.ability.seal and self.ability.seal.extra.seal_disabled) then
    if not self:can_calculate() then return {} end
end   
'''
match_indent = true

# Badge add_to_deck and remove_from_deck functionality
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if obj and obj.add_to_deck and type(obj.add_to_deck) == 'function' then
            obj:add_to_deck(self, from_debuff)
        end        if self.ability.h_size ~= 0 then
            G.hand:change_size(self.ability.h_size)
        end
'''
position = "after"
payload = '''
local seal = G.P_SEALS[self.seal] or {}
if seal and seal.add_to_deck and type(seal.add_to_deck) == 'function' then
            seal:add_to_deck(self, from_debuff)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if obj and obj.remove_from_deck and type(obj.remove_from_deck) == 'function' then
            obj:remove_from_deck(self, from_debuff)
        end        if self.ability.h_size ~= 0 then
            G.hand:change_size(-self.ability.h_size)
        end
'''
position = "after"
payload = '''
local seal = G.P_SEALS[self.seal] or {}
if seal and seal.remove_from_deck and type(seal.remove_from_deck) == 'function' then
            seal:remove_from_deck(self, from_debuff)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
function Card:set_seal(_seal, silent, immediate)
'''
position = "after"
payload = '''
    if self.seal then
        local obj = G.P_SEALS[self.seal] or {}
        if obj and obj.remove_from_deck and type(obj.remove_from_deck) == 'function' then
                obj:remove_from_deck(self, from_debuff)
        end
    end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
for k, v in pairs(G.P_SEALS[_seal].config or {}) do
            if type(v) == 'table' then
                self.ability.seal[k] = copy_table(v)
            else
                self.ability.seal[k] = v
            end
        end
'''
position = "after"
payload = '''
local obj = G.P_SEALS[self.seal] or {}
if obj and obj.add_to_deck and type(obj.add_to_deck) == 'function' then
        obj:add_to_deck(self, from_debuff)
end
'''
match_indent = true

# Badge calc_dollar_bonus functionality
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if obj.calc_dollar_bonus and type(obj.calc_dollar_bonus) == 'function' then
    return obj:calc_dollar_bonus(self)
end
'''
position = "at"
payload = '''
local seal = G.P_SEALS[self.seal] or {}
if (obj.calc_dollar_bonus and type(obj.calc_dollar_bonus) == 'function') and (seal and seal.calc_dollar_bonus and type(seal.calc_dollar_bonus) == 'function') then
    return obj:calc_dollar_bonus(self) + seal:calc_dollar_bonus(self)
elseif obj.calc_dollar_bonus and type(obj.calc_dollar_bonus) == 'function' then
    return obj:calc_dollar_bonus(self)
elseif seal and seal.calc_dollar_bonus and type(seal.calc_dollar_bonus) == 'function' then
    return seal:calc_dollar_bonus(self)
end
'''
match_indent = true

# Badge load functionality (for like one badge lmao)
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
self.seal = cardTable.seal
'''
position = "after"
payload = '''
local seal = G.P_SEALS[self.seal] or {}
if seal and seal.load and type(seal.load) == 'function' then 
    seal:load(self, cardTable, other_card)
end
'''
match_indent = true


# Piercing Blow and Feeling Fine functionality
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.perishable and self.ability.perish_tally <= 0 then 
    if not self.debuff then
        self.debuff = true
        if self.area == G.jokers then self:remove_from_deck(true) end
    end
    return
end
'''
position = "after"
payload = '''
if next(pmb_find_joker_with_seal('pmb_feelingfine')) and self.ability.set == "Joker" then should_debuff = false end
if next(pmb_find_joker_with_seal('pmb_piercingblow')) and self.playing_card then should_debuff = false end
'''
match_indent = true

# Feeling Fine specific functionality
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.config.center.perishable_compat and not self.ability.eternal then
'''
position = "at"
payload = '''
if self.config.center.perishable_compat and not self.ability.eternal and not next(pmb_find_joker_with_seal('pmb_feelingfine')) then 
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
function Card:set_rental(_rental)
'''
position = "after"
payload = '''
if next(pmb_find_joker_with_seal('pmb_feelingfine')) then _rental = nil end
'''
match_indent = true


# Ice Power functionality
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if not v.ability.eternal then deletable_jokers[#deletable_jokers + 1] = v end
'''
position = "at"
payload = '''
if not v.ability.eternal and v.seal ~= "pmb_icepower" then deletable_jokers[#deletable_jokers + 1] = v end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if v ~= eligible_card and (not v.ability.eternal) then v:start_dissolve(nil, _first_dissolve);_first_dissolve = true end
'''
position = "at"
payload = '''
if v ~= eligible_card and (not v.ability.eternal and v.seal ~= "pmb_icepower") then v:start_dissolve(nil, _first_dissolve);_first_dissolve = true end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if G.jokers.cards[i] ~= self and not G.jokers.cards[i].ability.eternal and not G.jokers.cards[i].getting_sliced then destructable_jokers[#destructable_jokers+1] = G.jokers.cards[i] end
'''
position = "at"
payload = '''
if G.jokers.cards[i] ~= self and (not G.jokers.cards[i].ability.eternal and G.jokers.cards[i].seal ~= "pmb_icepower") and not G.jokers.cards[i].getting_sliced then destructable_jokers[#destructable_jokers+1] = G.jokers.cards[i] end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if my_pos and G.jokers.cards[my_pos+1] and not self.getting_sliced and not G.jokers.cards[my_pos+1].ability.eternal and not G.jokers.cards[my_pos+1].getting_sliced then
'''
position = "at"
payload = '''
if my_pos and G.jokers.cards[my_pos+1] and not self.getting_sliced and (not G.jokers.cards[my_pos+1].ability.eternal and G.jokers.cards[my_pos+1].seal ~= "pmb_icepower") and not G.jokers.cards[my_pos+1].getting_sliced then
'''
match_indent = true

# Hammerman and Jumpman functionality
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
self.cost = math.max(1, math.floor((self.base_cost + self.extra_cost + 0.5)*(100-G.GAME.discount_percent)/100))
'''
position = "after"
payload = '''
if (next(pmb_find_joker_with_seal('pmb_hammerman')) and (self.ability and self.ability.extra and type(self.ability.extra) == "table" and self.ability.extra.hammer)) then self.cost = self.cost - (next(pmb_find_joker_with_seal('pmb_hammerman'))); self.cost = math.max(0, self.cost) end
if (next(pmb_find_joker_with_seal('pmb_jumpman')) and (self.ability and self.ability.extra and type(self.ability.extra) == "table" and self.ability.extra.jump)) then self.cost = self.cost - (next(pmb_find_joker_with_seal('pmb_jumpman'))); self.cost = math.max(0, self.cost) end
'''
match_indent = true